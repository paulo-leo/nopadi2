-- phpMyAdmin SQL Dump
-- version 4.8.5
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1:3306
-- Generation Time: 25-Jul-2020 às 03:19
-- Versão do servidor: 5.7.26
-- versão do PHP: 7.2.18

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `nano`
--

-- --------------------------------------------------------

--
-- Estrutura da tabela `cats`
--

DROP TABLE IF EXISTS `cats`;
CREATE TABLE IF NOT EXISTS `cats` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type` varchar(40) COLLATE utf8mb4_unicode_ci NOT NULL,
  `name` varchar(150) COLLATE utf8mb4_unicode_ci NOT NULL,
  `description` varchar(250) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `uri` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL,
  `cat_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Extraindo dados da tabela `cats`
--

INSERT INTO `cats` (`id`, `type`, `name`, `description`, `uri`, `cat_id`) VALUES
(15, 'doc', 'Nopadi Microframework', 'Nopadi é um microframework progressivo para a construção de aplicações web incrementais. O Nopadi está em sua versão beta em 0.1', 'nopadi-microframework', 0);

-- --------------------------------------------------------

--
-- Estrutura da tabela `posts`
--

DROP TABLE IF EXISTS `posts`;
CREATE TABLE IF NOT EXISTS `posts` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `title` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL,
  `type` varchar(30) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'post',
  `user_id` bigint(20) NOT NULL,
  `status` varchar(15) COLLATE utf8mb4_unicode_ci NOT NULL,
  `privacy` varchar(15) COLLATE utf8mb4_unicode_ci NOT NULL,
  `uri` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL,
  `cat_id` int(11) DEFAULT NULL,
  `post_id` int(11) DEFAULT NULL,
  `created_in` datetime NOT NULL,
  `published_in` datetime DEFAULT NULL,
  `updated_in` datetime DEFAULT NULL,
  `description` varchar(200) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `keyword` varchar(130) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `image_featured` varchar(200) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `content` longtext COLLATE utf8mb4_unicode_ci,
  `comment` varchar(3) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'on',
  `number` int(11) DEFAULT '0',
  `approved_by` int(20) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=86 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Extraindo dados da tabela `posts`
--

INSERT INTO `posts` (`id`, `title`, `type`, `user_id`, `status`, `privacy`, `uri`, `cat_id`, `post_id`, `created_in`, `published_in`, `updated_in`, `description`, `keyword`, `image_featured`, `content`, `comment`, `number`, `approved_by`) VALUES
(73, 'Introdução', 'doc', 1, 'published', 'public', 'introducao', 15, 0, '2020-07-20 12:25:40', '2020-07-20 12:25:40', NULL, '', '', NULL, '&lt;h4&gt;&lt;span style=&quot;color: rgb(0, 150, 136);&quot;&gt;&lt;strong&gt;O que é o Nopadi?&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;Nopadi é um micro-framework PHP simples e rápido focado no desenvolvimento incremental. Nopadi funciona basicamente como uma biblioteca para construção rápida de aplicações SPA, porém pode ser escalado facilmente para um completo sistema de gerenciamento de usuários, uma vez que essas funcionalidades já estão pré-programadas e com classes especificas para lidar com esse tipo de problema. A sintaxe do Nopadi foi desenvolvida para ser fácil de entender e implementar. O Nopadi utiliza fortemente o padrão de projeto MVC para construção de uma simples aplicação que poderá ser escalada para uma aplicação mais robusta dependendo da necessidade do projeto. O objetivo principal de um projeto Nopadi é fazer o programador focar mais nas regras de negócios do projeto e deixar as partes mais criticas reservadas para o momento de necessidade de uso, mas sem pesar na aplicação final. &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color: rgb(0, 150, 136);&quot;&gt;O padrão MVC&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Como já foi citado acima, o Nopadi utiliza fortemente o padrão de projeto MVC, com esse padrão, é possivel separar as responsabilidades da aplicação em 3 camadas distintas. São essas camadas o Modelo, que é herdado da classe &quot;Model&quot; que é responsável por lidar com os dados da base de dados ou do software de banco de dados (SGBD) como o MySQL que é o banco de dados oficial utilizado pelo Nopadi. &lt;span style=&quot;color: rgb(241, 241, 241);&quot;&gt;&lt;/span&gt;Também temos a camada do controlador que é herdada da classe &quot;Controller&quot; que é responsável pela lógica da aplicação. Uma classe controladora possui um ou mais métodos que servem de intermediários entre a camada modelo e a camada de visualização.&amp;nbsp; E por ultimo temos a camada de visualização, ou melhor &quot;view&quot;. Essa camada é gerenciada pela classe &quot;View&quot;. Essa classe ler um arquivo no formato HTML comum e o transforma em um arquivo recompilado que será renderizado com toda lógica da camada do controlador para o usuário final. &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(241, 241, 241);&quot;&gt;&lt;span style=&quot;background-color: rgb(244, 67, 54);&quot;&gt;Observação: &lt;/span&gt;&lt;/span&gt;o Nopadi aceita outros banco de dados, dependendo das configurações declaradas no arquivo de configurações de banco de dados, para saber mais, orientamos que você leia a sessão sobre configurações de banco de dados. &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;O Nopadi é uma tecnologia open source com base na licença MIT&lt;/strong&gt;. &lt;a href=&quot;https://pt.wikipedia.org/wiki/Licen%C3%A7a_MIT&quot; target=&quot;_blank&quot;&gt;https://pt.wikipedia.org/wiki/Licen%C3%A7a_MIT&lt;/a&gt;&lt;br&gt;&lt;/p&gt;', 'on', 1, NULL),
(74, 'Instalando o Nopadi', '', 1, 'published', 'public', 'instalando-o-nopadi', 15, 73, '2020-07-20 12:31:14', '2020-07-20 12:31:14', NULL, '', '', NULL, '&amp;lt;p&amp;gt;O Nopadi é disponobilizado como pacote no PHPlist. Para fazer a instalação do Nopadi, basta ter o Composer instalado em sua maquina e em seguida utilizar os comandos abaixo.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Para, assim que o Nopadi for baixado, será necessário criar o arquivo de auloading do compoer, por meio do comando, na linha de comando. &amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Você também pode obter o Nopadi por meio do GitHub, porém continua sendo necessário ter o composer instalado para criação do auloading. &amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;', 'on', 2, NULL),
(75, 'Estrutura de diretórios', '', 1, 'published', 'public', 'estrutura-de-diretorios', 15, 73, '2020-07-20 12:44:42', '2020-07-20 12:44:42', NULL, '', '', NULL, '&lt;p&gt;O Nopadi possui uma estrutura de diretórios muito bem definida por meio de sua hierarquia de arquivos e pastas. &lt;br&gt;&lt;/p&gt;&lt;p&gt;Na raíz do projeto Nopadi temos os seguintes arquivos:&lt;/p&gt;&lt;p&gt;composer.json&lt;/p&gt;&lt;p&gt;Arquivo do  Composer de configuração de dependências de um projeto Nopadi.&lt;/p&gt;&lt;p&gt;server.php&lt;/p&gt;&lt;p&gt;Arquivo de declaração de constantes importantes para o funcionamento de uma aplicação Nopadi. &lt;br&gt;&lt;/p&gt;&lt;p&gt;bootstrap.php&lt;/p&gt;&lt;p&gt;Arquivo que inicia a aplicação Nopadi, esse arquivo faz vinculo direto com o arquivo de auload.php da pasta vendor do Composer.&lt;/p&gt;&lt;p&gt;functions.php&lt;/p&gt;&lt;p&gt;Arquivo\r\n que disponibiliza funções auxiliadoras para o Nopadi. Nesse arquivo \r\nvocê terá funções auxiliadora para renderizar um arquivo de visualização\r\n sem a necessidade de instanciar a classe que lida com essa parte da \r\narquitetura MVC. &lt;br&gt;&lt;/p&gt;&lt;p&gt;nopadi.json &lt;br&gt;&lt;/p&gt;&lt;p&gt;Arquivo que possui os\r\n comando para que o Nopadi possa rodar em linha de comando e automatizar\r\n algumas tarefas, principalemnte tarefas referente a criação da \r\nestrutura de uma aplicação desenvolvida com Nopadi. &lt;/p&gt;', 'on', 3, NULL),
(76, 'Estrutura', 'doc', 1, 'published', 'public', 'estrutura', 15, 73, '2020-07-20 14:13:18', '2020-07-20 14:13:18', NULL, '', 'Estrutura de arquvos', NULL, '&lt;p&gt;O Nopadi possui uma estrutura de arquivos e diretórios muito bem resolvida. Vamos começar pelos arquivos e diretórios da raiz da aplicação Nopadi. &lt;br&gt;&lt;/p&gt;&lt;h4&gt;&lt;span style=&quot;color: rgb(0, 150, 136);&quot;&gt;Arquivos&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;bootstrap.php &lt;/strong&gt;é o arquivo responsável pela inicialização da aplicação, esse arquivo faz a comunicação direta com o carregamento automático do Composer e é uma espécie de intermediário entre a sua aplicação e os pacotes do Composer. &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;server.php&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt; é o arquivo responsável pela declaração e inicialização das variáveis de ambiente do Nopadi, é um importante arquivo para o ciclo de vida da sua aplicação.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;functions.php &lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;é o arquivo responsável pela definição das &lt;span style=&quot;color: rgb(233, 30, 99);&quot;&gt;&lt;strong&gt;funções auxiliadoras&lt;/strong&gt;&lt;/span&gt; da aplicação Nopadi, todas as funções definidas neste arquivo terá escopo global dentro da sua aplicação. &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;composer.json &lt;/strong&gt;é o arquivo do Composer responsável pelas configurações de dependências de sua aplicação em formato &lt;strong&gt;Json&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;nopadi.json &lt;/strong&gt;é o arquivo do Nopadi responsável pela declaração de comandos que serão executados via linha de comando no formato &lt;strong&gt;Json&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h4&gt;&lt;span style=&quot;color: rgb(0, 150, 136);&quot;&gt;Diretórios&lt;/span&gt;&lt;br&gt;&lt;/h4&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 150, 136);&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;Diretório&lt;/span&gt;&lt;strong&gt; app&lt;/strong&gt;&lt;/span&gt;: neste diretório ficará toda lógica de sua aplicação, como seus arquivos de visualizações(views), controladores(controllers), modelos(models), além dos arquivos de interceptação de rotas e os seus filtros como os &lt;strong&gt;Middlewares&lt;/strong&gt; e serviços globais como os &lt;strong&gt;Providers&lt;/strong&gt;. &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 150, 136);&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;Diretório&lt;/span&gt;&lt;strong&gt; vendor&lt;/strong&gt;&lt;/span&gt;:este é o diretório utilizado pelo Composer para gerar e gerenciar as dependências de sua aplicação. &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 150, 136);&quot;&gt;Diretório&lt;strong&gt; nopadi&lt;/strong&gt;&lt;/span&gt;: neste diretório ficará armazenado todos os namespaces do framework nopadi, você não poderá fazer nenhuma modificação nesta pasta. &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 150, 136);&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;Diretório&lt;/span&gt;&lt;strong&gt; public&lt;/strong&gt;&lt;/span&gt;: nesse diretório fica todos os arquivos públicos de sua aplicação, como: folhas de estilos, scripts, imagens entre outros. Além das subpastas existentes neste diretório, como: css, js&amp;nbsp; e img, você poderá criar novas pastas, porém é importante que se mantenha as pastas já existes. Existem também no diretório &lt;strong&gt;public&lt;/strong&gt; os seguintes arquivos: index.php, arquivo responsável pela inicialização de sua aplicação a partir do diretório public, além do arquivo .htaccess que é responsável pela reescrita de URL para URL amigáveis, e o arquivo robot.txt responsável pela indexação da sua aplicação pelos mecanismos de buscas da internet.&amp;nbsp; &lt;span style=&quot;color: rgb(244, 67, 54);&quot;&gt;Atenção&lt;/span&gt;: &lt;strong&gt;jamais modifique o arquivo &lt;span style=&quot;color: rgb(255, 152, 0);&quot;&gt;index.php&lt;/span&gt;&lt;/strong&gt;. Caso seja necessário alterar alguma regra do arquivo &lt;strong&gt;.htaccess&lt;/strong&gt;, cuidado para não modificar as regras já definidas pela aplicação para reescrita da URL, pois uma modificação incorreta neste arquivo poderá retirar a sua aplicação do ar. &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 150, 136);&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;Diretório&lt;/span&gt;&lt;strong&gt; storage&lt;/strong&gt;&lt;/span&gt;: neste diretório são armazenados arquivos de idiomas de sua aplicação pelo subdiretório &quot;langs&quot;, além de arquivos de caches gerados pelas views de sua aplicação, os arquivos de cache são gerados de forma automática pelo próprio Nopadi. &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 150, 136);&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;Diretório&lt;/span&gt;&lt;strong&gt; config&lt;/strong&gt;&lt;/span&gt;: neste diretório você encontrará subpastas como: database, smtp e app. Esse é um diretprio de configuração de sua aplicação, sendo muito importante para configurar as informações globais de sua aplicação nas constantes de ambiente e também para configuração de acesso ao banco de dados, além do servidor de e-mail SMTP. &lt;br&gt;&lt;/p&gt;', 'on', 3, NULL),
(77, 'Instalação', 'doc', 1, 'published', 'public', 'instalacao', 15, 73, '2020-07-20 14:20:19', '2020-07-20 14:20:19', '2020-07-25 00:06:54', '', '', NULL, '&lt;p&gt;Para realizar a instalação do Nopadi, é necessário que você tenha um gerenciador de dependencias para o PHP&amp;nbsp; como o &quot;Composer&quot; instalado em seu computador, você poderá obter o &quot;Composer&quot; pelo seguinte link :&lt;span style=&quot;color: rgb(33, 150, 243);&quot;&gt;&lt;a href=&quot;https://getcomposer.org/&quot; title=&quot;Site oficial do Composer&quot; target=&quot;_blank&quot;&gt;https://getcomposer.org/&lt;/a&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Siga as instruções para instalação do Composer conforme o site oficial do mesmo.&lt;/p&gt;&lt;p&gt;Após baixar e instalar o Composer, abra o terminal de seu computador e digite o seguinte comando dentro do diretório de sua preferência. &lt;br&gt;&lt;/p&gt;&lt;pre class=&quot;  language-js&quot;&gt;&lt;code class=&quot;  language-js&quot;&gt;composer create-project nopadi/mf&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(156, 39, 176);&quot;&gt;O comando acima irá baixar o Nopadi e suas dependências para o seu computador diretamente do packagist.org&lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color: rgb(0, 150, 136);&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color: rgb(0, 150, 136);&quot;&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color: rgb(0, 150, 136);&quot;&gt;Executando o Nopadi em um servidor embutido do PHP&lt;/span&gt;&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Após realizar a instalação do Nopadi por meio do Composer, você poderá utilizar o seguinte comando para rodar o Nopadi em um servidor embutido do PHP. Lembrando que os servidores embutidos do PHP é somente para teste local, ou seja, para ambiente de desenvolvimento. Para produção, orientamos que não se utilize os servidores embutidos, a propria documentação do PHP faz essa recomendação, você pode confirma essa orientação por meio do seguinte link: &lt;a href=&quot;https://www.php.net/manual/pt_BR/features.commandline.webserver.php&quot; title=&quot;Documentação oficial do PHP&quot; target=&quot;_blank&quot;&gt;https://www.php.net/manual/pt_BR/features.commandline.webserver.php&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Com o comando abaixo a sua aplicação Nopadi rodará na porta &lt;strong&gt;8080&lt;/strong&gt; que poderá ser acessada pela seguinte URL: localhost:8080&lt;br&gt;&lt;/p&gt;&lt;pre class=&quot;  language-js&quot;&gt;&lt;code class=&quot;  language-js&quot;&gt;composer nopadi&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;server&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Você também pode usar o comando &lt;span style=&quot;color: rgb(33, 150, 243);&quot;&gt;&lt;span style=&quot;background-color: rgb(0, 0, 0);&quot;&gt;composer nopadi-8000&lt;/span&gt;&lt;/span&gt; para rodar um servidor na porta &lt;strong&gt;8000&lt;/strong&gt;. O acesso será pela seguinte URL:localhost:8000&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(241, 241, 241);&quot;&gt;&lt;span style=&quot;background-color: rgb(244, 67, 54);&quot;&gt;Observação:&lt;/span&gt;&lt;/span&gt; caso você não queira instalar o Nopadi por meio do método acima, você poderá fazer um clone ou um download no formato zip do repositório do Nopadi por meio do GitHub, porém de qualquer forma, será necessário utilizar o Composer para gerar as dependências junto com o arquivo de &quot;autoload.php&quot; do Composer que fica dentro da pasta &quot;vendor&quot;. &lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: rgb(33, 150, 243);&quot;&gt;&lt;/span&gt;&lt;/p&gt;', 'on', 2, NULL),
(78, 'Roteamento', 'doc', 1, 'published', 'public', 'roteamento', 15, 73, '2020-07-20 14:20:33', '2020-07-20 14:20:33', '2020-07-24 23:11:40', '', '', NULL, '&lt;p&gt;Até o momento, nós só falamos do padrão MVC que o Nopadi utiliza fortemente para criar uma aplicação, mas no meio desse processo, existe um outro conceito muito importante que é o conceito de rotas. As rotas nada mais é que uma URL dentro do contexto de aplicação Nopadi que serve para localizar um determinado serviço. Ao baixar o Nopadi e executá-lo pela primeira vez, será gerado uma tela de boas vindas que é o serviço inicial do Nopadi, porém nós podemos modificá-la de acordo com o nosso desejo, na verdade, podemos até criar novas rotas. Para isso, vá até o diretório app na raiz de sua aplicação Nopadi e em seguida entre no diretório &quot;Routes&quot;. Abra o arquivo &quot;web.php&quot; e observe o seguinte código abaixo:&lt;br&gt;&lt;/p&gt;&lt;p&gt;Ao abrir o arquivo web.php pela primeira vez você encontrará o seguinte código abaixo que é responsável pela renderização da tela de boas vindas:&lt;br&gt;&lt;/p&gt;&lt;pre class=&quot;  language-javascript&quot;&gt;&lt;code class=&quot;  language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;php\r\n\r\nuse Nopadi\\Routes\\Route&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;token comment&quot;&gt;/******************************************************\r\n ******** Nopadi - Desenvolvimento web progressivo*****\r\n ******** Arquivo de rotas principal (web)*************\r\n******************************************************/&lt;/span&gt;\r\n\r\nRoute&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;/&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;\r\n   &lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;welcome&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Vamos adicionar o seguinte código abaixo para criarmos mais uma rota:&lt;br&gt;&lt;/p&gt;&lt;pre class=&quot;  language-js&quot;&gt;&lt;code class=&quot;  language-js&quot;&gt;Route&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;my-route&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;\r\n  &lt;span class=&quot;token function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n  &lt;span class=&quot;token function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;Essa é a minha primeira rota!&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;info&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Explicando o código acima&lt;/strong&gt;: na primeira linha, chamamos o método estático &quot;get&quot; da classe &quot;Route&quot; e passamos como primeiro parâmetro o nome de uma rota que queremos declarar ou melhor, adicionar no escopo de nossa aplicação Nopadi. e em seguida passamos uma função anônima ou de closure no segundo parâmetro. Dentro desta função(anônima/closure), chamamos 2 funções auxiliadoras&amp;nbsp; já na primeira linha da função anônima/closure. A primeira função declarada é&amp;nbsp; a função &quot;hello&quot;. Essa função aceita dois parâmetros, sendo o primeiro uma string simples para saída e o segundo parâmetro é opcional, e serve para informar o formato da string de acordo com a folha de estilo utilizada na aplicação. Neste caso, chamamos a função &quot;hello&quot; duas vezes. Na primeira chamada colocamos a função auxiliadora &quot;style&quot; para retornar uma folha de estilo css. E na segunda declaração, escrevemos a nossa mensagem e em seguida informamos o formato de saída. &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 255, 255);&quot;&gt;&lt;span style=&quot;background-color: rgb(244, 67, 54);&quot;&gt;Observação&lt;/span&gt;&lt;/span&gt;: o exemplo de código acima não é o recomendado pelo&amp;nbsp; padrão de projeto MVC. O único motivo que explica esse tipo de código é o fornecimento de respostas via AJAX, neste caso só seria justificável o uso da função &quot;hello&quot;. Para os demais exemplos, o recomendável é que seja utilizado um arquivo de visualização(view) e por meio da função auxiliadora &quot;view&quot; seja passado no primeiro parâmetro o nome do seu arquivo de visualização. Veja o mesmo exemplo reescrito de forma correta seguindo o padrão MVC. &lt;br&gt;&lt;/p&gt;&lt;pre class=&quot;  language-javascript&quot;&gt;&lt;code class=&quot;  language-javascript&quot;&gt;Route&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;my-route&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;\r\n   &lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;hello&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;No código acima criamos um arquivo de visualização chamado &lt;strong&gt;&quot;hello.view.html&quot;&lt;/strong&gt; dentro do seguinte diretório: &quot;app/Views&quot; e escrevemos um texto simples no formato HTML dentro deste arquivo conforme o exemplo abaixo:&lt;/p&gt;&lt;pre class=&quot;  language-javascript&quot;&gt;&lt;code class=&quot;  language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Essa é a minha primeira rota&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(96, 125, 139);&quot;&gt;//A saída do exemplo acima será &quot;Essa é a minha primeira rota!&quot;&lt;/span&gt;&lt;span style=&quot;color: rgb(96, 125, 139);&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(96, 125, 139);&quot;&gt;&lt;/span&gt;A função auxiliadora &quot;view&quot; aceita um segundo parâmetro(opcional) no formato de um array associativo. Cada índice desse array será transformado em uma variável do PHP pela função &quot;view&quot;, ou seja,você poderá imprimir essas variáveis em seu arquivo de visualização. Veja os seguintes exemplos abaixo:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Código da função anônima ou de closure:&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;  language-javascript&quot;&gt;&lt;code class=&quot;  language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;hello&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;name&#039;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;Paulo&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Código do arquivo de visualização:&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;  language-extend&quot;&gt;&lt;code class=&quot;  language-extend&quot;&gt;Meu nome é {{$name}}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(96, 125, 139);&quot;&gt;//A saída do exemplo acima será &quot;Meu nome é Paulo!&quot;&lt;/span&gt;&lt;span style=&quot;color: rgb(96, 125, 139);&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Observe que o nosso exemplo acima ainda não está em um padrão de conformidade com o MVC. Pois para que possamos atingir esse padrão, é necessário que essa chamada seja feita dentro de uma classe controladora. Para isso, vamos criar dentro do diretório: &quot;app/Controllers&quot; o seguinte arquivo: &quot;MyController.php&quot; e de dentro deste arquivo vamos colar o seguinte código abaixo:&lt;/p&gt;&lt;pre class=&quot;  language-js&quot;&gt;&lt;code class=&quot;  language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;php \r\nnamespace App\\Controllers&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; \r\n\r\nuse Nopadi\\MVC\\Controller&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyController&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Controller&lt;/span&gt;\r\n&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;\r\n   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\r\n   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;\r\n     $data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;name&#039;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;Paulo&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n     &lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;hello&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;$data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;\r\n&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pronto! Já temos um controlador responsável por renderizar o arquivo de visualização criado anteriormente.&amp;nbsp; Agora falta chamar esse controlador no arquivo &quot;web.php&quot;.&lt;/p&gt;&lt;p&gt;Vamos modificar a rota criada anteriormente conforme o código abaixo:&lt;/p&gt;&lt;pre class=&quot;  language-js&quot;&gt;&lt;code class=&quot;  language-js&quot;&gt;Route&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;my-route&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;MyController@hello&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;O que fizemos acima?&lt;/strong&gt; Só modificamos o segunda parâmetro do método estático &quot;get&quot; da classe &quot;Route&quot;. Ao invés de passarmos uma função anônima, foi passado uma string com o nome da classe controladora criada (MyController)&amp;nbsp; e o símbolo de &quot;@&quot; serve para invocar o método &quot;hello&quot; que está dentro dessa classe, ou seja, toda vez que acessarmos essa rota, será executado automaticamente o método &quot;hello&quot; da classe &quot;MyController&quot;.&amp;nbsp; Esse é um exemplo trivial de se utilizar um controlador isolado em um arquivo. Para saber mais sobre os roteamentos e controladores, você deverá ler as sessões especificas para eles, pois tem muito mais que possa ser feito. Até o momento você viu o básico sobre o Nopadi. &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;', 'on', 4, NULL),
(79, 'Visualização', 'doc', 1, 'published', 'public', 'visualizacao', 15, 0, '2020-07-24 12:02:22', '2020-07-24 12:02:22', '2020-07-24 17:33:36', '', '', NULL, '&lt;p&gt;&lt;span style=&quot;color: rgb(0, 150, 136);&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;Chegamos em uma das camadas mais importante no conceito MVC utilizado pelo Nopadi. Nessa sessão estudaremos a fundo como o Nopadi faz para renderizar a camada visual, ou uma view com o View Template. &lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 150, 136);&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;color: rgb(96, 125, 139);&quot;&gt;&lt;strong&gt;Como funciona o processo de renderização de um template Nopadi?&lt;/strong&gt; &lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 150, 136);&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;A classe que gerencia os templates do Nopadi ler o arquivo de template com a sintaxe do View Template e a recompila para um código PHP compatível, essa recompilação sempre considerará o melhor código para interpretação. Qualquer arquivo de template do Nopadi será transformado em texto puro e em seguida será feito a troca das estruturas para sintaxe PHP de acordo com as regras de expressões regulares definidas dentro da classe de visualização, esse processo acontecerá toda vez que o arquivo for alterado pelo programador, caso não exista alteração no arquivo de template que já foi recompilado e salvo em cache, o Nopadi buscará sempre o arquivo salvo em cache que já foi recompilado anteriormente, com isso a aplicação ficará mais rápida, já que não será necessário realizar uma nova recompilação.&lt;/span&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 150, 136);&quot;&gt;&lt;strong&gt;O que é o View Template?&lt;/strong&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;O Nopadi utiliza uma linguagem de template própria desenvolvida para rodar dentro da plataforma Nopadi. Essa linguagem foi denominada de&amp;nbsp; View Template. O objetivo dessa linguagem é separar as responsabilidades visuais de uma aplicação Nopadi. Essa linguagem realiza o cache de seus arquivos de template. Com a sintaxe de template do Vew Template, é possível usar estruturas de controles e condicionais dentro de um simples arquivo HTML com a extensão view.html. Você também pode usar a extensão view.php, mas o recomendável pela equipe Nopadi é utilizar a extensão HTML. Além disso, é possível construir um visualizador sem a necessidade de usar a extensão view, mas neste caso, a sintaxe do View Template não será renderizada. Esse tipo de visualizador é recomendável para servidão de API. &lt;br&gt;&lt;/p&gt;&lt;p&gt;A responsabilidade pela renderização de um arquivo de visualização é da classe View que fica dentro do namespace Nopadi &amp;gt; MVC, caso você queira realizar uma chamada a esta classe, você deverar declarar o operador &quot;use&quot; sucedido do caminho do namespace onde se encontra a classe conforme o exemplo de código abaixo:&lt;br&gt;&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;php\r\n\r\nuse NopadiMVCView&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n\r\n$view &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n$view1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $view&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;my-view&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n&lt;span class=&quot;token comment&quot;&gt;//View 2 com parâmetros &lt;/span&gt;\r\n$view2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $view&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;my-view2&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;name&#039;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;Paulo&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;Felizmente, existe uma forma mais fácil de se construir o código acima sem a necessidade de instanciar a classe &quot;View&quot;. Esse outro jeito de renderizar um arquivo de visualização é feito por meio da função auxiliadora &quot;view&quot;. Veja o exemplo abaixo:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;php\r\n&lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;my-view1&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n&lt;/code&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//View 2 com parâmetros &lt;/span&gt;&lt;/code&gt;\r\n&lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;my-view2&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;name&#039;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;Paulo&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Um visualizador recebe 2 parâmetros, sendo o primeiro obrigatório e o segundo não. O primeiro é o nome do arquivo de template que será renderizado, sendo que este arquivo tem que está dentro do seguinte diretório: &quot;app/Views&quot;. &lt;br&gt;&lt;/p&gt;&lt;p&gt;Você poderá colocar os seus arquivos de template dentro de subdiretórios, desde que esteja no dentro do diretório padrão(app/View). Por exemplo: você pode criar uma pasta chamada &quot;clientes&quot; e colocar todos os arquivos de visualização nesta pasta. A chamada na função auxiliadora &lt;strong&gt;&quot;view&quot;&lt;/strong&gt; se dará da seguinte forma &lt;strong&gt;view(&#039;clientes/add&#039;);&lt;/strong&gt; para o arquivo salvo dentro da pasta &quot;clientes&quot; com o nome &quot;&lt;strong&gt;add.view.html&lt;/strong&gt;&quot; ou &quot;add.view.php&quot;.&lt;/p&gt;', 'on', 0, NULL),
(80, 'Sintaxe', 'doc', 1, 'published', 'public', 'sintaxe', 15, 79, '2020-07-24 13:14:42', '2020-07-24 13:14:42', '2020-07-24 17:34:27', '', '', NULL, '&lt;p&gt;Um arquivo de template do Nopadi, possui uma estrutura muito bem definida e de fácil entendimento, muito parecida com a de outros frameworks. Vamos começar pela estrutura condicional, veja o exemplo abaixo de como você pode utilizar essa estrutura. &lt;br&gt;&lt;/p&gt;&lt;pre class=&quot;  language-javascript&quot;&gt;&lt;code class=&quot;  language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;\r\n  @&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\r\n      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;\r\n @&lt;span class=&quot;token function&quot;&gt;elseif&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\r\n      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;\r\n @&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; \r\n      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Nenhuma das condições anteriores&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;\r\n  @endif\r\n&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;br&gt;&lt;/pre&gt;&lt;p&gt;Observe acima que é utilizado o símbolo de &quot;@&quot; para indicar uma sintaxe de template, com isso podemos injetar diretamente códigos PHP no meio do nosso arquivo HTML.&amp;nbsp; Não se esqueça que qualquer estrutura aberta em um template deve ser fechada, conforme a sintaxe alternativa do PHP. &lt;br&gt;&lt;/p&gt;&lt;p&gt;Agora veremos 3 estruturas de repetição, começando pela &quot;@in&quot;. Essa estrutura tem por objetivo realizar em um array associativo vindo de uma consulta no banco de dados, sendo projetada especificamente para essa finalidade. Com o &quot;@in&quot; não é necessário declarar os índices da interação, já que ela transforma cada linha em um variável do PHP compatível dentro de sua interação de repetição. Veja o exemplo abaixo:&lt;/p&gt;&lt;pre class=&quot;  language-javascript&quot;&gt;&lt;code class=&quot;  language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//Sintaxe no controle&lt;/span&gt;\r\n$usuarios &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DB&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;users&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;all&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;users&#039;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;$usuarios&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;token comment&quot;&gt;//Sintaxe no arquivo de template&lt;/span&gt;\r\n@&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$users&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\r\n   &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Nome&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;$name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;\r\n   &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;E&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;mail&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;$email&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;\r\n@endin&lt;/code&gt;&lt;br&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Observe&lt;/strong&gt; que utilizamos o &quot;&lt;strong&gt;{{}}&lt;/strong&gt;&quot;, isso serve para indicar uma saída, é equivalente ao &quot;echo&quot; do PHP, com a diferença que há tratamento de interpretação XSL aqui, por este motivo, a saída é somente em texto simples, para uma saída HTML é recomendável o uso da seguinte sintaxe, &quot;&lt;strong&gt;{!!}&lt;/strong&gt;&quot; ao invés de &quot;&lt;strong&gt;{{}}&lt;/strong&gt;&quot;. &lt;span style=&quot;color: rgb(244, 67, 54);&quot;&gt;&lt;strong&gt;Caso você queira imprimir no template o símbolo&lt;/strong&gt;&lt;/span&gt; &quot;&lt;span style=&quot;color: rgb(233, 30, 99);&quot;&gt;&lt;strong&gt;{{}}&lt;/strong&gt;&lt;/span&gt;&quot; basta usar o sinal de negação conforme o seguinte exemplo: &quot;&lt;span style=&quot;color: rgb(244, 67, 54);&quot;&gt;&lt;strong&gt;{!{}}&lt;/strong&gt;&lt;/span&gt;&quot;. Você também pode utilizar o &quot;&lt;strong&gt;{[]}&lt;/strong&gt;&quot; que é voltado especificamente para retorno de funções. &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Vamos demonstrar no código abaixo mais duas estruturas de repetição utilizado pelo template. &lt;br&gt;&lt;/p&gt;&lt;pre class=&quot; language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//Estrutura @for&lt;/span&gt;\r\n@&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;$i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;$i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\r\n   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;$i&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;\r\n@endfor\r\n\r\n&lt;span class=&quot;token comment&quot;&gt;//Estrutura @foreach&lt;/span&gt;\r\n@&lt;span class=&quot;token function&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$users &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; $id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\r\n  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;$id&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;name&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;\r\n@endforeach&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 255, 255);&quot;&gt;&lt;br&gt;&lt;span style=&quot;background-color: rgb(244, 67, 54);&quot;&gt;Importante:&lt;/span&gt;&lt;/span&gt; você pode usar as funções auxiliadoras dentro de seus arquivos de template, se a função auxiliara for uma função que retornar algum tipo de código HTML, utilize a seguinte sintaxe de saída &quot;&lt;strong&gt;{!options($cats)!}&lt;/strong&gt;&quot;, caso contrário, se o retorno for um texto simples, opte por: &quot;&lt;strong&gt;{{url(&#039;doc&#039;)}}&lt;/strong&gt;&quot;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Em algum momento é necessário utilizar códigos PHP&lt;/strong&gt; dentro do seu arquivo de template, para evitar isso &quot;&lt;!--?php ?--&gt;&quot; o Nopadi implementou a seguinte sintaxe:&lt;span style=&quot;color: rgb(244, 67, 54);&quot;&gt; &lt;/span&gt;&lt;strong&gt;&lt;span style=&quot;color: rgb(244, 67, 54);&quot;&gt;@php&lt;/span&gt;&amp;nbsp; &lt;/strong&gt;&lt;span style=&quot;color: rgb(0, 150, 136);&quot;&gt;/*Seu código PHP vai aqui!*/&lt;/span&gt;&lt;span style=&quot;color: rgb(244, 67, 54);&quot;&gt;&lt;strong&gt; @endphp&lt;/strong&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;', 'on', 2, NULL);
INSERT INTO `posts` (`id`, `title`, `type`, `user_id`, `status`, `privacy`, `uri`, `cat_id`, `post_id`, `created_in`, `published_in`, `updated_in`, `description`, `keyword`, `image_featured`, `content`, `comment`, `number`, `approved_by`) VALUES
(81, 'Componentização', 'doc', 1, 'published', 'public', 'componentizacao', 15, 79, '2020-07-24 13:43:49', '2020-07-24 13:43:49', '2020-07-24 17:29:38', '', '', NULL, '&lt;p&gt;As vezes é necessário separar os nossos arquivos de visualização em partes, ou ate mesmo desenvolver componentes específicos para cada parte. Felizmente, o Nopadi pensou nessa saída e implementou soluções simples para isso. Podemos realizar a contemporização de partes do nosso template das seguinte forma: por meio da função auxiliadora &quot;view&quot; podemos chamar um arquivo de template dentro do outro, neste caso, o arquivo chamado será independente, podendo ser passado novas variáveis no segundo parâmetro. Também temos a estrutura de template chamada &quot;&lt;strong&gt;@include&lt;/strong&gt;&quot;, neste caso, o template é incluído dentro do template atual, porém o mesmo herdará as variáveis do primeiro.&amp;nbsp; Além disso, temos dentro do diretório de templates (appViews) o arquivo &quot;components.json&quot; onde podemos declarar um nome de componentes e especificar o seu caminho e assim chama-lo dentro do nosso arquivo de visualização por meio da seguinte sintaxe:&lt;br&gt;&lt;/p&gt;&lt;pre class=&quot; language-js&quot;&gt;&lt;code class=&quot; language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;\r\n	&lt;span class=&quot;token string&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;site/header&quot;&lt;/span&gt;\r\n&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br&gt;&lt;/pre&gt;&lt;p&gt;No arquivo de template chamaremos o componente acima da seguinte forma:&lt;br&gt;&lt;/p&gt;&lt;pre class=&quot; language-js&quot;&gt;&lt;code class=&quot; language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;Exemplo &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;\r\n@&lt;span class=&quot;token function&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;header&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;title&#039;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;Usuários&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\r\n\r\n&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;Exemplo &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;\r\n@&lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;header&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;title&#039;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;Usuários&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\r\n\r\n&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;Exemplo &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; sem passar o segundo parâmetro&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;\r\n@&lt;span class=&quot;token function&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;header&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;A principal vantagem&lt;/strong&gt; de utilizar uma componentização está no isolamento do código e na simplicidade da chamada, um componente ficará disponível para todos os arquivos de template criados sem a necessidade de escrever o caminho completo do arquivo novamente. É claro, que para cada situação requer um uso diferenciado conforme a sua analise do caso.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Observação: &lt;/strong&gt;&lt;span style=&quot;color: rgb(244, 67, 54);&quot;&gt;um componente deve ser salvo com a extensão de um template, como por exemplo:&lt;/span&gt;&lt;strong&gt; &quot;header.view.html&quot;. &lt;br&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Com o &quot;@include&quot; você poderá fatiar facilmente o seu template e montá-lo da seguinte forma:&lt;/p&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;Cabeçalho &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; site&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;\r\n@&lt;span class=&quot;token function&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;header&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\r\n\r\n&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;Menu lateral direito &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; site&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;\r\n&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;right&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;\r\n      @&lt;span class=&quot;token function&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;sidebar&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\r\n&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;Rodapé &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; site&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;\r\n@&lt;span class=&quot;token function&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;footer&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;', 'on', 3, NULL),
(82, 'Migração', 'doc', 1, 'published', 'public', 'migracao', 15, 0, '2020-07-24 17:44:29', '2020-07-24 17:44:29', '2020-07-24 17:44:54', '', '', NULL, '&lt;p&gt;&lt;span style=&quot;color: rgb(244, 67, 54);&quot;&gt;&lt;strong&gt;Atenção: essa especificação está sendo revisada, por este motivo essa documentação ainda não está disponível nesta versão do Nopadi. Orientamos que você realize a criação manual da sua base de dados ou se conecte a um banco de dados existente. &lt;/strong&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;', 'on', 0, NULL),
(83, 'Rotas e Controladores', 'doc', 1, 'published', 'public', 'rotas-e-controladores', 15, 0, '2020-07-24 17:55:36', '2020-07-24 17:55:36', '2020-07-24 20:06:31', '', '', NULL, '&lt;p&gt;O Nopadi utiliza fortemente o padrão de projeto MVC, e nesta sessão, estudaremos o padrão de projeto chamado controle(da classe &quot;Controller&quot;). Esse padrão é responsável por guardar toda lógica da aplicação Nopadi. &lt;br&gt;&lt;/p&gt;&lt;p&gt;Quando é criado um classe controladora no Nopadi, obrigatoriamente ela tem que herdar os métodos da classe &quot;Controller&quot;, conforme o exemplo de código abaixo:&lt;/p&gt;&lt;pre class=&quot;  language-javascript&quot;&gt;&lt;code class=&quot;  language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;php \r\nnamespace App\\Controllers&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; \r\n\r\nuse Nopadi\\MVC\\Controller&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyController&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Controller&lt;/span&gt;\r\n&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;\r\n &lt;span class=&quot;token comment&quot;&gt;/*A lógica de sua aplicação vai aqui!*/&lt;/span&gt;\r\n&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Geralmente as classes controladoras da aplicação Nopadi ficam armazenadas no seguinte diretório: &quot;app/Controllers&quot;. Por padrão, quando é feita uma chamada para um controlador por meio de uma rota, a prioridade é sempre deste diretório, a não ser que seja configurado na rota o caminho do namespace. &lt;br&gt;&lt;/p&gt;&lt;p&gt;Os métodos herdados da classe &quot;Controller&quot; devem ser sobrescrito para o seu uso, cada método herdado tem uma finalidade de acordo com o serviço de roteamento. Os serviços no Nopadi, geralmente se dividem em 4 verbos, são eles o:&lt;strong&gt; GET&lt;/strong&gt;,&amp;nbsp; &lt;strong&gt;PUT&lt;/strong&gt;, &lt;strong&gt;DELETE&lt;/strong&gt; e &lt;strong&gt;POST&lt;/strong&gt;. Dentro do conceito REST, esses verbos terão o seu comportamento de acordo com o serviço especificado. Veja abaixo os métodos herdados e os verbos e rotas associados a eles. &lt;br&gt;&lt;/p&gt;&lt;p class=&quot;responsive&quot;&gt;&lt;/p&gt;&lt;table class=&quot;table-all hoverable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Rota&lt;br&gt;&lt;/td&gt;&lt;td&gt;URL&lt;br&gt;&lt;/td&gt;&lt;td&gt;Verbo&lt;/td&gt;&lt;td&gt;Método&lt;/td&gt;&lt;td&gt;Descrição&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;product&lt;/td&gt;&lt;td&gt;product&lt;/td&gt;&lt;td&gt;GET&lt;/td&gt;&lt;td&gt;index&lt;/td&gt;&lt;td&gt;Exibe todos os produtos&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;product/{id}&lt;/td&gt;&lt;td&gt;product/1&lt;/td&gt;&lt;td&gt;GET&lt;br&gt;&lt;/td&gt;&lt;td&gt;show&lt;/td&gt;&lt;td&gt;Exibe um produto especifico&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;product/create&lt;/td&gt;&lt;td&gt;product/create&lt;/td&gt;&lt;td&gt;GET&lt;br&gt;&lt;/td&gt;&lt;td&gt;create&lt;/td&gt;&lt;td&gt;Exibe um formulário para cadastrar um produto&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;product&lt;/td&gt;&lt;td&gt;product&lt;/td&gt;&lt;td&gt;POST&lt;/td&gt;&lt;td&gt;store&lt;/td&gt;&lt;td&gt;Faz o cadastro do produto&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;product/{id}/edit&lt;/td&gt;&lt;td&gt;product/1/edit&lt;/td&gt;&lt;td&gt;GET&lt;/td&gt;&lt;td&gt;edit&lt;/td&gt;&lt;td&gt;Exibe um formulário para editar um produto especifico&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;product&lt;/td&gt;&lt;td&gt;product&lt;/td&gt;&lt;td&gt;DELETE&lt;/td&gt;&lt;td&gt;destroy&lt;/td&gt;&lt;td&gt;Deleta um produto especifico&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;product&lt;/td&gt;&lt;td&gt;product&lt;/td&gt;&lt;td&gt;PUT&lt;/td&gt;&lt;td&gt;update&lt;/td&gt;&lt;td&gt;Atualiza um produto especifico&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;product/help&lt;/td&gt;&lt;td&gt;product/help&lt;/td&gt;&lt;td&gt;GET&lt;/td&gt;&lt;td&gt;help&lt;/td&gt;&lt;td&gt;Exibe uma página de ajuda para os recursos de produtos&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;---&lt;/td&gt;&lt;td&gt;---&lt;/td&gt;&lt;td&gt;*&lt;/td&gt;&lt;td&gt;objectWriteNot(String $text)&lt;/td&gt;&lt;td&gt;Você pode sobrescrever esse método caso queira exibir uma mensagem para um método invocado que não tenha sido sobrescrito. &lt;br&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 87, 34);&quot;&gt;OBS: * significa que a aplicabilidade será para todos e --- quando não é necessário atrelar verbos ou URLs. &lt;/span&gt;&lt;/p&gt;', 'on', 0, NULL),
(84, 'Declaração de rotas', 'doc', 1, 'published', 'public', 'declaracao-de-rotas', 15, 83, '2020-07-24 19:03:15', '2020-07-24 19:03:15', '2020-07-24 20:03:34', '', '', NULL, '&lt;p&gt;Um roteamento é a declaração de um caminho para que a aplicação possa acessar um determinado recurso para o usuário final. Por exemplo: &quot;product/{id}&quot; é a declaração de uma rota para um determinado recuso, na URL deveremos digitar da seguinte forma: &quot;www.nopadi.com/product/1&quot;. Assim encontraremos o recurso vinculado a esta rota.&lt;/p&gt;&lt;p&gt;O Nopadi tem um pacote especifico para lidar com os roteamentos, porém deste pacote, só necessitaremos utilizar uma classe, as demais são classes auxiliadoras que serão chamadas automaticamente pela classe de rota principal. &lt;br&gt;&lt;/p&gt;&lt;p&gt;O Nopadi possui dois arquivos para rotas, um chamado &quot;web.php&quot; e o outro de &quot;api.php&quot;. Como o nome sugere, tudo que for relacionado a exibição de sua aplicação pela web é declarado no arquivo &quot;web.php&quot; e tudo que for desenvolvido para servir a uma API para sua aplicação deverá ser declarado no arquivo &quot;api.php&quot;. &lt;span style=&quot;background-color: rgb(255, 87, 34);&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: rgb(241, 241, 241);&quot;&gt;&lt;span style=&quot;color: rgb(255, 255, 255);&quot;&gt;&lt;span style=&quot;background-color: rgb(244, 67, 54);&quot;&gt;Se você declarar uma rota com o &lt;strong&gt;verbo POST&lt;/strong&gt; no arquivo WEB sem o &lt;strong&gt;prefixo &quot;api&quot;&lt;/strong&gt;, será utilizado um &lt;strong&gt;Middleware de autenticação&lt;/strong&gt; do Nopadi para comparar os tokens para ajudar a prevenir &lt;strong&gt;ataques de CSRF&lt;/strong&gt;. Neste caso, se você utilizar um arquivo de visualização com um formulário especifico, utilize a função &lt;strong&gt;csrf_field()&lt;/strong&gt; dentro do seu formulário.&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: rgb(241, 241, 241);&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;No arquivo &quot;web.php&quot; que já vem com a declaração de uso da classe &quot;Route&quot; você poderá usar os seguintes métodos estáticos abaixo:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Route::get(String $routeName,$controllerName&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;, Array (opcional) $args&lt;/strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Cria um recurso com o verbo GET, os dois primeiros parâmetros são obrigatórios&amp;nbsp; e no segundo parâmetro você poderá passar uma função anônima ou o nome da classe auxiliadora sucedida do símbolo de &quot;@&quot; indicando o nome do controlador a ser executado no acesso a rota. &lt;br&gt;&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Route&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;my-route2&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;\r\n\r\n   &lt;span class=&quot;token function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;Minha rota&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n\r\nRoute&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;my-route&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;MyController@hello&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;token comment&quot;&gt;//Irá ler qualquer numero após &quot;my-route&quot;&lt;/span&gt;\r\nRoute&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;my-route/{id}&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;MyController@hello&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Route::post(String $routeName,$controllerName&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;, Array (opcional) $args&lt;/strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Similar a &quot;Route::get&quot; com a diferença que o verbo chamado será o &lt;strong&gt;POST&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Route&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;my-route&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;MyController@hello&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Route::put(String $routeName,$controllerName&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;, Array (opcional) $args&lt;/strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Similar a &quot;Route::get&quot; com a diferença que o verbo chamado será o &lt;strong&gt;PUT&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Route&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;my-route&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;MyController@hello&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Route::delete(String $routeName,$controllerName&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;, Array (opcional) $args&lt;/strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Similar a &quot;Route::get&quot; com a diferença que o verbo chamado será o &lt;strong&gt;DELETE&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Route&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:delete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;my-route&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;MyController@hello&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Route::any(String $routeName,$controllerName&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;, Array (opcional) $args&lt;/strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Similar a &quot;Route::get&quot; porém a rota é aplicada para todos os verbos.&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Route&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;my-route&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;MyController@hello&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Route::resources(String $routeName,$controllerName, Array (opcional) $args)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Esse método cria automaticamente todas as rotas para os controladores herdados da classe &quot;Controller&quot;&lt;strong&gt;.&lt;br&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Route&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&lt;strong&gt;resources&lt;/strong&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;my-route&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;MyController&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Route::controllers(String $routeName,$controllerName&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;, Array (opcional) $args&lt;/strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Esse método associa um array de rotas e controladores a uma classe controladora especifica. &lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/*Rotas para controle de sessão do usuário*/&lt;/span&gt;\r\n$authenticate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;\r\n   &lt;span class=&quot;token string&quot;&gt;&#039;login|admin&#039;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;formLogin&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\r\n   &lt;span class=&quot;token string&quot;&gt;&#039;post:login|admin&#039;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;sendLogin&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\r\n   &lt;span class=&quot;token string&quot;&gt;&#039;logout&#039;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;logout&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\r\n   &lt;span class=&quot;token string&quot;&gt;&#039;recover-password&#039;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;formRecoverPassword&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\r\n   &lt;span class=&quot;token string&quot;&gt;&#039;post:recover-password&#039;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;recoverPassword&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\r\n   &lt;span class=&quot;token string&quot;&gt;&#039;post:recover-password-update&#039;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;passwordUpdate&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\r\n   &lt;span class=&quot;token string&quot;&gt;&#039;recover-password/{string}&#039;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;formRecoverPasswordUpdate&#039;&lt;/span&gt;\r\n   &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\r\n   \r\nRoute&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;controllers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$authenticate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;AuthenticateController&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Route::group(&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;Array&amp;nbsp; $args, function(){...}&lt;/strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Esse método agrupa todos os recursos criados e aplica a eles todos os argumentos dados pelo primeiro parametro (args). &lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt; &lt;span class=&quot;token comment&quot;&gt;/*Controle de documentos*/&lt;/span&gt;\r\n Route&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;prefix&#039;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;doc&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;\r\n\r\n	Route&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;@&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;DocumentationController@index&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;; //Saída de URL &quot;doc&quot;&lt;/span&gt;\r\n	Route&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;{string}&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;DocumentationController@category&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;; &lt;/span&gt;&lt;/code&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;//Saída de URL &quot;doc/texto&quot;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;\r\n	Route&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;{string}/{string}&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#039;DocumentationController@page&#039;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;; &lt;/span&gt;&lt;/code&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;//Saída de URL &quot;doc/texto/texto&quot;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;\r\n	\r\n	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Observação: Quando você utiliza um &quot;@&quot; na declaração de uma rota dentro do método &quot;group&quot;, significa que essa rota terá o nome do prefix definido nos argumentos. &lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Os seguintes índices do argumento&lt;/strong&gt; &quot;args&quot; podem ser utilizados no terceiro parâmetro (opcional) dos métodos: &quot;resouces&quot;, &quot;get&quot;, &quot;put&quot;, &quot;delete&quot;, &quot;post&quot;, &quot;any&quot;, &quot;controllers&quot; e no primeiro parâmetro (obrigatório) do método &quot;group&quot;:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;prefix&lt;/strong&gt;&amp;nbsp; : o prefixo que será aplicado no inicio da URL. &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;namespace : &lt;/strong&gt;o caminho de onde será carregado a classe controladora, por padrão o namespace é: &quot;app/Controllers&quot;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;params : &lt;/strong&gt;parâmetros adicionais, sua declaração é livre conforme a necessidade do programador, pode ser passado um array ou uma simples string entre outros tipos de dados. &lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;middleware : &lt;/strong&gt;um array (não associativo) com o nome dos Middlewares, ou melhor, de filtros que serão executados antes da execução do recurso da rota. &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Observação, o parâmetro &quot;args&quot; deve ser passado no formato de array (associativo) do PHP com os respectivos índices acima. &lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;', 'on', 2, NULL),
(85, 'Nopadi CLI', 'doc', 1, 'published', 'public', 'nopadi-cli', 15, 73, '2020-07-24 21:11:45', '2020-07-24 21:11:45', '2020-07-24 22:04:05', '', '', NULL, '&lt;p&gt;O Nopadi CLI é um recurso para facilitar a vida dos programadores e aumentar a produtividade na programação. Com este recurso você poderá criar toda estrutura do seu projeto via linha de comando.&lt;/p&gt;&lt;p&gt;Os comandos mais utilizados é o &quot;&lt;strong&gt;composer nopadi create&lt;/strong&gt;&lt;controllername&gt;&lt;dirname&gt; &amp;lt;argumento1&amp;gt; &amp;lt;argumento2&amp;gt; &amp;lt;argumento1&amp;gt;(opcional)&quot;&lt;/dirname&gt;&lt;/controllername&gt;&lt;/p&gt;&lt;p&gt;Exemplo de uso:&lt;br&gt;&lt;/p&gt;&lt;pre class=&quot;  language-js&quot;&gt;&lt;code class=&quot;  language-js&quot;&gt;composer nopadi create controller MyController&lt;/code&gt;&lt;br&gt;&lt;/pre&gt;&lt;p&gt;Para que o comando acima funcione, você deverá navegar até o diretório \r\nraiz de seu projeto via CLI. Geralmente, no Windows OS, você pode copiar\r\n o endereço do diretório onde está instalado o seu projeto Nopadi e \r\ncolar o caminho no prompt de comando depois de digitar CD.&lt;strong&gt; &lt;br&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Exemplo: &lt;span style=&quot;color: rgb(103, 58, 183);&quot;&gt;CD C:/nopadi&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;O comando &quot;&lt;strong&gt;create&quot;&lt;/strong&gt; pode ser usado para criar&lt;strong&gt; view, model, controller &lt;/strong&gt;e&lt;strong&gt; middleware.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(244, 67, 54);&quot;&gt;Outras especificações deste comando estão sendo implantadas, como por exemplo, a criação de &quot;providencia de serviços&quot;, mas ainda não foi implantado. Como o Nopadi está na versão beta, é muito provável que essa implantação será lançada na versão de produção. &lt;/span&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Comandos personalizados&lt;/strong&gt;: você também pode criar os seus próprios comandos para automatizar alguns processos, na verdade, dependendo de sua criatividade, você poderá automatizar toda a sua aplicação, o limite é a sua imaginação. Para criar um comando, basta abrir o arquivo &quot;nopadi.json&quot; na raiz do seu projeto Nopadi e inserir um novo índice no arquivo Json, onde a chave desse índice corresponderá no comando que será chamado na linha de comando e o valor desta chave é o caminho completo para o arquivo que será executado. Veja o exemplo abaixo:&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;\r\n   &lt;span class=&quot;token string&quot;&gt;&quot;meu-comando&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;storage/cli/meu_comando.php&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\r\n   &lt;span class=&quot;token string&quot;&gt;&quot;create&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nopadi/CLI/create.php&quot;&lt;/span&gt;\r\n&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Você poderá captar até 10 argumentos da linha de comando para o seu arquivo. Cada argumento é separado por espaço. O Nopadi CLI transforma os argumentos nas seguintes variáveis: &lt;span style=&quot;color: rgb(33, 150, 243);&quot;&gt;$arg1&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;,&lt;/span&gt;  $arg2&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;,&lt;/span&gt;  $arg3&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;...&lt;/span&gt; $arg10&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(33, 150, 243);&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;Exemplo de uso dentro do arquivo &quot;meu_comando.php&quot;:&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;php\r\n   echo &lt;span class=&quot;token string&quot;&gt;&quot;Esse é um comando via CLI &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$arg1;\r\n&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Exemplo de uso no CMD ou CLI passando um argumento($arg1):&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;composer nopadi meu&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;comando testando&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(96, 125, 139);&quot;&gt;A saída no prompt de comando será:&lt;/span&gt;&lt;span style=&quot;color: rgb(33, 150, 243);&quot;&gt;&lt;span style=&quot;background-color: rgb(0, 0, 0);&quot;&gt; Esse é um comando via CLI testando&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(33, 150, 243);&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(33, 150, 243);&quot;&gt;&lt;br&gt;&lt;/span&gt;  &lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color: rgb(103, 58, 183);&quot;&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;', 'on', 5, NULL);

-- --------------------------------------------------------

--
-- Estrutura da tabela `tokens`
--

DROP TABLE IF EXISTS `tokens`;
CREATE TABLE IF NOT EXISTS `tokens` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `role` varchar(10) COLLATE utf8mb4_unicode_ci NOT NULL,
  `status` varchar(10) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_in` datetime DEFAULT NULL,
  `token` varchar(70) COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Extraindo dados da tabela `tokens`
--

INSERT INTO `tokens` (`id`, `user_id`, `role`, `status`, `created_in`, `token`) VALUES
(1, 1, 'recover', 'active', '2020-07-11 17:46:24', '9dcfc470e086c9e75756f66534a2c5b5');

-- --------------------------------------------------------

--
-- Estrutura da tabela `users`
--

DROP TABLE IF EXISTS `users`;
CREATE TABLE IF NOT EXISTS `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `role` varchar(15) COLLATE utf8mb4_unicode_ci NOT NULL,
  `name` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(70) COLLATE utf8mb4_unicode_ci NOT NULL,
  `lang` varchar(5) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `image` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `status` varchar(15) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `password` varchar(62) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_in` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Extraindo dados da tabela `users`
--

INSERT INTO `users` (`id`, `role`, `name`, `email`, `lang`, `image`, `status`, `password`, `created_in`) VALUES
(1, 'admin', 'Paulo Leonardo', 'pldasc@gmail.com', 'pt-br', NULL, NULL, '$2y$10$YjWFKh9aqpqrog0grDQaJOThWUkMLAdCM1uwH9JMzH/0ARcnNo8qO', '2020-06-10 22:34:02'),
(2, 'collaborator', 'Jonas Faculdadex', 'jonas@gmail.com', NULL, NULL, NULL, '$2y$10$pdl0QJr/8RCPuZ2P0uXr8.tY1xHRSJn1A28S.EeuUE81xhsmudgDy', '2020-07-01 19:19:59'),
(5, 'subscriber', 'Marcelino João Cassimiro', 'marcelinojoao.riodejaneiro@gmail.com', NULL, NULL, NULL, '$2y$10$bnRehKe0BT.rfOXjwnMPAeONaDaL6Ikple..o5JFl5IyHNJRTPMVS', '2020-07-10 19:15:56'),
(6, 'subscriber', 'Ana Maria', 'anamaria@gmail.com', NULL, NULL, NULL, '$2y$10$nCkCNR/F4a5irbOspyZgfu0z6gmGcmhcNhCWhpacYPPL//rVuCGRe', '2020-07-11 18:12:33');
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
